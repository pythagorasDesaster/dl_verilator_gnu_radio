#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_POSITIONAL_SINGLE([command])
# ARG_OPTIONAL_SINGLE([file-name],[f],[a verilog file])
# ARG_OPTIONAL_SINGLE([top-name],[t],[name of top module])
# ARG_OPTIONAL_SINGLE([auto-clk],[a],[automatically clock this port with samplerate])
# ARG_OPTIONAL_BOOLEAN([copy-so],[c],[will copy the shared object to your current directory])
# ARG_OPTIONAL_BOOLEAN([install],[i],[also install object into gnu radio])
# ARG_TYPE_GROUP_SET([commands],[COMMAND],[command],[list, rm, build])
# ARG_DEFAULTS_POS()
# ARG_HELP([The Dynamicaly Linked Verilator Tool v1.1])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}

# validators

commands()
{
	local _allowed=("list" "rm" "build") _seeking="$1"
	for element in "${_allowed[@]}"
	do
		test "$element" = "$_seeking" && echo "$element" && return 0
	done
	die "Value '$_seeking' (of argument '$2') doesn't match the list of allowed values: 'list', 'rm' and 'build'" 4
}


begins_with_short_option()
{
	local first_option all_short_options='ftacih'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_command=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_file_name=
_arg_top_name=
_arg_auto_clk=
_arg_copy_so="off"
_arg_install="off"


print_help()
{
	printf '%s\n' "The Dynamicaly Linked Verilator Tool v1.1"
	printf 'Usage: %s [-f|--file-name <arg>] [-t|--top-name <arg>] [-a|--auto-clk <arg>] [-c|--(no-)copy-so] [-i|--(no-)install] [-h|--help] <command>\n' "$0"
	printf '\t%s\n' "-f, --file-name: a verilog file (no default)"
	printf '\t%s\n' "-t, --top-name: name of top module (no default)"
	printf '\t%s\n' "-a, --auto-clk: automatically clock this port with samplerate (no default)"
	printf '\t%s\n' "-c, --copy-so, --no-copy-so: will copy the shared object to your current directory (off by default)"
	printf '\t%s\n' "-i, --install, --no-install: also install object into gnu radio (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-f|--file-name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_file_name="$2"
				shift
				;;
			--file-name=*)
				_arg_file_name="${_key##--file-name=}"
				;;
			-f*)
				_arg_file_name="${_key##-f}"
				;;
			-t|--top-name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_top_name="$2"
				shift
				;;
			--top-name=*)
				_arg_top_name="${_key##--top-name=}"
				;;
			-t*)
				_arg_top_name="${_key##-t}"
				;;
			-a|--auto-clk)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_auto_clk="$2"
				shift
				;;
			--auto-clk=*)
				_arg_auto_clk="${_key##--auto-clk=}"
				;;
			-a*)
				_arg_auto_clk="${_key##-a}"
				;;
			-c|--no-copy-so|--copy-so)
				_arg_copy_so="on"
				test "${1:0:5}" = "--no-" && _arg_copy_so="off"
				;;
			-c*)
				_arg_copy_so="on"
				_next="${_key##-c}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-c" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-i|--no-install|--install)
				_arg_install="on"
				test "${1:0:5}" = "--no-" && _arg_install="off"
				;;
			-i*)
				_arg_install="on"
				_next="${_key##-i}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-i" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'command'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_command "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash
# Validation of values
_arg_command="$(commands "$_arg_command" "command")" || exit 1


### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


BUILD_DIR=/tmp/dl_verilator
SHARE=/home/thomas/Sync/projects/private/dl_verilog_gnuradio/dl_verilator
GR_BLOCKS=/usr/share/gnuradio/grc/blocks/

if [ "$_arg_command" = "list" ]; then
	ls $GR_BLOCKS | grep ^dlverilog_ | grep -Po 'dlverilog_\K.*?(?=_verilog\.block\.yml)'
	exit
fi
if [ "$_arg_command" = "rm" ]; then

	if [ "$_arg_top_name" = "" ]; then
		echo "ERROR: missing top name !!!"
		exit 1
	fi

	sudo -v
	if [ ! $? = 0 ]; then exit; fi

	echo "deleting module $_arg_top_name"
#	set -o xtrace

	sudo rm $GR_BLOCKS/dlverilog_"$_arg_top_name"_verilog.block.yml
	if [ ! $? = 0 ]; then exit; fi

	rm $SHARE/modules/lib$_arg_top_name.so

	exit
fi
if [ "$_arg_command" = "build" ]; then
	if [ "$_arg_file_name" = "" ]; then
		echo "ERROR: missing file !!!"
		exit 1
	fi
	if [ "$_arg_top_name" = "" ]; then
		echo "ERROR: missing top name !!!"
		exit 1
	fi
	if [ "$_arg_install" = "on" ]; then
		sudo -v
		if [ ! $? = 0 ]; then exit; fi
	fi

	echo "building $_arg_top_name from $_arg_file_name"

#	set -o xtrace

	mkdir -p $BUILD_DIR

	echo "generating IO map ..."
	python3 $SHARE/scripts/gen_ios.py $_arg_file_name $_arg_top_name $BUILD_DIR/ios.json $_arg_auto_clk
	if [ ! $? = 0 ]; then exit; fi

	echo "generating Cpp wrapper ..."
	python3 $SHARE/scripts/gen_wrapper.py $BUILD_DIR/ios.json $SHARE/templates/v_wrapper.cpp $BUILD_DIR/wrapper.cpp
	if [ ! $? = 0 ]; then exit; fi

	echo "running verilator ..."
	verilator --cc --build $_arg_file_name $BUILD_DIR/wrapper.cpp --top-module $_arg_top_name --lib-create $_arg_top_name --Mdir $BUILD_DIR/obj_dir
	if [ ! $? = 0 ]; then exit; fi

	if [ "$_arg_copy_so" = "on" ]; then
		echo "copying shared object ..."
		cp $BUILD_DIR/obj_dir/lib$_arg_top_name.so .
	fi

	if [ "$_arg_install" = "on" ]; then
		echo "installing module ..."
		cp $BUILD_DIR/obj_dir/lib$_arg_top_name.so $SHARE/modules/

		echo "generating gnu radio block ..."
		python3 $SHARE/scripts/gen_yaml.py $BUILD_DIR/ios.json $SHARE/templates/dlverilog_template_verilog.block.yml $SHARE/modules/lib$_arg_top_name.so $_arg_auto_clk
		if [ ! $? = 0 ]; then exit; fi

		echo "installing into gnu radio ..."
		sudo mv dlverilog_"$_arg_top_name"_verilog.block.yml $GR_BLOCKS
	fi

	exit
fi
exit 0

# ] <-- needed because of Argbash
